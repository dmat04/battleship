extend type Query {
  gameSettings(gameId: ID!): GameSettings!
}

extend type Mutation {
  createRoom: RoomCreatedResult!
  joinRoom(inviteCode: String!): RoomJoinedResult!
  placeShips(
    roomID: ID!
    shipPlacements: [ShipPlacementInput!]!
  ): ShipsPlacedResult
}

type RoomCreatedResult {
  roomID: ID!
  inviteCode: String!
  wsAuthCode: String!
}

type RoomJoinedResult {
  roomID: ID!
  wsAuthCode: String!
}

type ShipsPlacedResult {
  placedShips: [PlacedShip!]!
  gameRoomStatus: GameRoomStatus!
}

enum ShipClassName {
  SUBMARINE
  DESTROYER
  CRUISER
  BATTLESHIP
  CARRIER
}

enum ShipOrientation {
  VERTICAL
  HORIZONTAL
}

type Coordinate {
  x: Int!
  y: Int!
}

input CoordinateInput {
  x: Int!
  y: Int!
}

type Ship {
  shipID: ID!
  type: ShipClassName!
  size: Int!
}

input ShipPlacementInput {
  shipID: ID!
  orientation: ShipOrientation!
  position: CoordinateInput!
}

type PlacedShip {
  ship: Ship!
  orientation: ShipOrientation!
  position: Coordinate!
}

type GameSettings {
  boardWidth: Int!
  boardHeight: Int!
  availableShips: [Ship!]!
  turnDuration: Int!
}

type GameRoomStatus {
  playerName: String!
  playerID: ID!
  playerShipsPlaced: Boolean!
  playerSocketConnected: Boolean!
  opponentName: String
  opponentID: ID
  opponentShipsPlaced: Boolean!
  opponentSocketConnected: Boolean!
  currentPlayerID: ID
}
